(window.webpackJsonp=window.webpackJsonp||[]).push([[121],{583:function(t,s,a){"use strict";a.r(s);var n=a(3),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("线程之间通信 加锁的目的是为了控制对共享资源的访问")]),t._v(" "),s("h2",{attrs:{id:"多线程通信方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多线程通信方式"}},[t._v("#")]),t._v(" 多线程通信方式")]),t._v(" "),s("ul",[s("li",[t._v("volatile")]),t._v(" "),s("li",[t._v("synchronized")]),t._v(" "),s("li",[t._v("ReentrantLock/Condition")]),t._v(" "),s("li",[t._v("CountdownLatch")]),t._v(" "),s("li",[t._v("LockSupport")]),t._v(" "),s("li",[t._v("Semaphore")]),t._v(" "),s("li",[t._v("Pipeline")])]),t._v(" "),s("h2",{attrs:{id:"线程池"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程池"}},[t._v("#")]),t._v(" 线程池")]),t._v(" "),s("h3",{attrs:{id:"线程池大小设置问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程池大小设置问题"}},[t._v("#")]),t._v(" 线程池大小设置问题")]),t._v(" "),s("p",[t._v("硬件资源：")]),t._v(" "),s("ul",[s("li",[t._v("CPU个数")]),t._v(" "),s("li",[t._v("内存大小")]),t._v(" "),s("li",[t._v("计算密集型/IO密集型")])]),t._v(" "),s("p",[t._v("对于计算密集型任务，设置线程池的大小为 "),s("code",[t._v("N(cpu) + 1")]),t._v("能实现最优解")]),t._v(" "),s("p",[t._v("对于IO密集型任务，需要估算 等待时间  和  计算时间 比值 "),s("code",[t._v("N(cpu) * U(cpu) * (1 + W/C)")])]),t._v(" "),s("blockquote",[s("p",[t._v("N(cpu): cpu数量， U(cpu): cpu使用率， W：等待时间， C：cpu时间时间")]),t._v(" "),s("p",[s("code",[t._v("int n_cpu = Runtime.getRuntime().availableProcessors()")])])]),t._v(" "),s("ul",[s("li",[t._v("基本大小：没有任务执行时，线程池大小")]),t._v(" "),s("li",[t._v("最大大小：允许的最大线程数（只有在工作队列满时才会创建超过 基本大小的 线程树）")]),t._v(" "),s("li",[t._v("存活时间：当钱线程池超过了基本大小，并且某个线程空闲时间超过存活时间，将进行线程回收")]),t._v(" "),s("li",[t._v("任务队列：没有线程供使用将进入队列等待")]),t._v(" "),s("li",[t._v("饱和策略：任务队列满时执行的操作")]),t._v(" "),s("li",[t._v("线程池工程： 自定义线程创建")])]),t._v(" "),s("p",[s("code",[t._v("CacheThreadPool")]),t._v("\n为每个任务创建一个线程，并且可以重用现有线程，无核心线程数，阻塞队列没有线程数量限制，超过60s的空闲线程将会被回收")]),t._v(" "),s("p",[s("code",[t._v("FixedThreadPool")]),t._v("\n核心线程数和最大线程数是相同的，并且无空闲线程, 阻塞队列没有线程数量限制")]),t._v(" "),s("p",[s("code",[t._v("ScheduledThreadPool")]),t._v("\n固定的核心线程数，最大线程数没有限制，并且无空闲线程，阻塞队列没有线程数量限制")]),t._v(" "),s("p",[s("code",[t._v("SingleThreadPool")]),t._v("\n只有一个线程的线程池")]),t._v(" "),s("p",[t._v("当任务之间存在依赖时，推荐使用无界队列， 当任务之间独立， 推荐使用有界队列")]),t._v(" "),s("h3",{attrs:{id:"executorservice"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#executorservice"}},[t._v("#")]),t._v(" ExecutorService")]),t._v(" "),s("p",[t._v("该接口接管执行服务的生命周期， 线程池生命周期主要有三种状态： 运行、关闭、已终止。")]),t._v(" "),s("ul",[s("li",[t._v("运行： 线程池在初始化时处于运行状态")]),t._v(" "),s("li",[t._v("关闭： 线程池将不在接受新的任务，同时等待已经提交的任务执行完成（包括那些未开始执行的任务）")]),t._v(" "),s("li",[t._v("已终止： 线程池已经不在运行")])]),t._v(" "),s("p",[t._v("shutdown： 将线程设置未关闭状态\nshutdownNow: 将取消所有正在运行的任务，并且不在启动队列中尚未开始执行的任务")]),t._v(" "),s("h2",{attrs:{id:"常用工具类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常用工具类"}},[t._v("#")]),t._v(" 常用工具类")]),t._v(" "),s("h3",{attrs:{id:"completionservice"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#completionservice"}},[t._v("#")]),t._v(" CompletionService")]),t._v(" "),s("p",[t._v("本质是将线程池和队列融合在一起； 通常我们将任务放入线程池后， 通过get方法阻塞获取。但当我们有多个任务，且任务执行的 时间长短不一，阻塞获取结果的方法效率将非常低。可以通过一个类似优先级队列东西，我们从队列中取出最先执行完成的任务结果，\n进行后续操作，任务没有执行完成，就在队列中进行等待。")]),t._v(" "),s("p",[t._v("简单实现")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Test")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ExecutionException")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ExecutorService")]),t._v(" es "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Executors")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("newFixedThreadPool")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CompletionService")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" ecs "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ExecutorCompletionService")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("es"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 模拟渲染页面")]),t._v("\n      ecs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("submit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n         "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sleep")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1500")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n         "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"render page"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      \n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 模拟渲染10张图片")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n         ecs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("submit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sleep")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"render image"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n         "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      \n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n         "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Future")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" poll "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ecs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("take")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n         "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("poll"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n      es"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("shutdown")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br")])]),s("h3",{attrs:{id:"completablefuture"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#completablefuture"}},[t._v("#")]),t._v(" CompletableFuture")]),t._v(" "),s("blockquote",[s("p",[t._v("then开头方法末尾 如果有加 Async， 表示then方法之前的线程和then方法里面的线程不共用同一个线程池， 使用ForkingJoin线程池")])]),t._v(" "),s("ol",[s("li",[s("p",[t._v("任务异步回调")]),t._v(" "),s("ul",[s("li",[t._v("thenRun/thenRunAsync: 不关心上一个任务的执行结果，无参数，无返回")]),t._v(" "),s("li",[t._v("thenAccept/thenAcceptAsync: 依赖上一个任务的返回结果，有传参，无返回")]),t._v(" "),s("li",[t._v("thenApply/thenApplyAsync: 依赖上一个任务的返回结果，有传参，有返回")]),t._v(" "),s("li",[t._v("exceptionally: 任务执行异常时执行回调方法")]),t._v(" "),s("li",[t._v("whenComplete: 任务执行完成后的回调方法，无返回值")]),t._v(" "),s("li",[t._v("handler: 任务执行完成后执行的回调方法，有返回值")])])]),t._v(" "),s("li",[s("p",[t._v("多任务组合")]),t._v(" "),s("p",[t._v("AND：")]),t._v(" "),s("ul",[s("li",[t._v("thenCombine/thenCombineAsync： 将2个任务的执行结果作为入参，传入到指定方法中，且有返回")]),t._v(" "),s("li",[t._v("thenAcceptBoth/thenAcceptBothAsync： 将2个任务的执行结果作为入参，传入到指定方法中，无返回")]),t._v(" "),s("li",[t._v("runAfterBoth/runAfterBothAsync： 不会把执行结果当做方法入参，且没有返回")])]),t._v(" "),s("p",[t._v("OR：")]),t._v(" "),s("ul",[s("li",[t._v("applyToEither/applyToEitherAsync: 将已经完成的任务作为方法的入参，传递到指定方法中，且有返回")]),t._v(" "),s("li",[t._v("acceptEither/acceptEitherAsync： 将已经完成的任务作为方法的入参，传递到指定方法中， 但无返回")]),t._v(" "),s("li",[t._v("runAfterEither/runAfterEitherAsync： 不会把执行结果当做方法入参，且没有返回")])]),t._v(" "),s("p",[t._v("allOf:")]),t._v(" "),s("ul",[s("li",[t._v("所有任务都执行完成后，才异步执行该方法")])]),t._v(" "),s("p",[t._v("anyOf:")]),t._v(" "),s("ul",[s("li",[t._v("任意一个线程执行完成后， 异步执行该方法")])]),t._v(" "),s("p",[t._v("thenCompose:")]),t._v(" "),s("ul",[s("li",[t._v("某个方法执行完后，将该任务的执行结果作为方法入参，去执行指定方法，方法会返回一个新的completableFuture对象")])])])]),t._v(" "),s("blockquote",[s("p",[t._v("future 需要获取到返回值， 才能看到异常")]),t._v(" "),s("p",[t._v("默认线程池需要考虑生产环境是否适用")])]),t._v(" "),s("h3",{attrs:{id:"countdownlatch"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#countdownlatch"}},[t._v("#")]),t._v(" CountDownLatch")]),t._v(" "),s("h3",{attrs:{id:"cyclicbarrier"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cyclicbarrier"}},[t._v("#")]),t._v(" CyclicBarrier")]),t._v(" "),s("h3",{attrs:{id:"semaphore"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#semaphore"}},[t._v("#")]),t._v(" Semaphore")]),t._v(" "),s("h2",{attrs:{id:"synchronized"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#synchronized"}},[t._v("#")]),t._v(" synchronized")]),t._v(" "),s("p",[t._v("synchronized实现机制是对对象加锁， java中每个对象都关联一个监视器"),s("code",[t._v("ObjectMonitor")]),t._v(", 监视器地址记录在对象的 "),s("code",[t._v("MarkWord")]),t._v("上")]),t._v(" "),s("p",[s("code",[t._v("ObjectMonitor")]),t._v(" 大致结构如下")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("ObjectMonitor() {\n    ...\n    _count = 0; // 记录重入次数\n    _owner = NULL;  // 记录持有线程\n    _cxq = NULL;    // 记录锁阻塞线程 （锁竞争失败进入的阻塞队列）\n    _WaitSet = NULL;    // 记录处于wait状态的线程 （同步队列）\n    _EntryList = NULL;  // 记录处于锁阻塞状态的线程 （notify从同步队列移入到阻塞队列中获取锁）\n    ...\n}\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br")])]),s("blockquote",[s("p",[t._v("_cxq 和 _EntryList 共通组成阻塞队列")])]),t._v(" "),s("p",[t._v("synchronized关键在于两条指令 "),s("code",[t._v("monitorenter")]),t._v("和"),s("code",[t._v("monitorexit")])]),t._v(" "),s("p",[s("code",[t._v("monitorenter")]),t._v("： 获取对象 "),s("code",[t._v("monitor")]),t._v(" 所有权")]),t._v(" "),s("ul",[s("li",[t._v("如果"),s("code",[t._v("monitor")]),t._v(" 的 "),s("code",[t._v("_count")]),t._v("为 0，没有线程持有锁，直接将其加一")]),t._v(" "),s("li",[t._v("如果"),s("code",[t._v("monitor")]),t._v(" 被线程占有，检测是否是当前线程，是当前线程加一，否则阻塞当前线程")])]),t._v(" "),s("p",[s("code",[t._v("monitorexit")]),t._v("： 将计数器减一，如果为0，则释放锁")]),t._v(" "),s("h2",{attrs:{id:"interrupt"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#interrupt"}},[t._v("#")]),t._v(" interrupt")]),t._v(" "),s("p",[t._v("Java的中断是一种协作机制，也就是说通过中断并不能直接中断另外一个线程，而需要被中断的线程自己处理中断。")]),t._v(" "),s("p",[t._v("在Java的中断模型中，每个线程都有一个boolean标识，代表着是否有中断请求（该请求可以来自所有线程，包括被中断的线程本身）。\n例如，当线程t1想中断线程t2，只需要在线程t1中将线程t2对象的中断标识置为true，然后线程2可以选择在合适的时候处理该中断请求。")]),t._v(" "),s("p",[t._v("中断方法：")]),t._v(" "),s("ul",[s("li",[t._v("interrupt: 设置线程的中断标志位为true")]),t._v(" "),s("li",[t._v("isInterrupted: 判断线程是否中断")]),t._v(" "),s("li",[t._v("interrupted: 返回当前线程的中断标志位，并清除中断标志")])]),t._v(" "),s("p",[t._v("可中断的阻塞： sleep、wait、join、park等， 调用interrupt方法会抛中断异常，同时"),s("strong",[t._v("会清除中断标志位")])]),t._v(" "),s("p",[t._v("不可中断的阻塞： 同步 Socket I/O, 同步I/O, synchronized等")])])}),[],!1,null,null,null);s.default=e.exports}}]);