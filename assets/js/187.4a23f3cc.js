(window.webpackJsonp=window.webpackJsonp||[]).push([[187],{648:function(_,v,e){"use strict";e.r(v);var i=e(3),t=Object(i.a)({},(function(){var _=this,v=_._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("h2",{attrs:{id:"redis早期使用单线程模型已经6-0后选择多选程模型原因"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#redis早期使用单线程模型已经6-0后选择多选程模型原因"}},[_._v("#")]),_._v(" redis早期使用单线程模型已经6.0后选择多选程模型原因")]),_._v(" "),v("ul",[v("li",[_._v("早期使用单线程原因：redis基于内存的操作，对内存和网络I/O读写要求比较高，对CPU计算要求不高。")]),_._v(" "),v("li",[_._v("6.0后选择多线程原因：通常说redis是单线程原因在于redis执行命令是按接受顺序执行，此处多线程是指redis执行I/O操作使用多线程提高网络读写效率。")])]),_._v(" "),v("p",[_._v("redis服务端架构采用reactive模型，主线程收到命令后会将其拆分多读、写事件，采用多线程方式处理这些读写事件可以加速网络I/O。")]),_._v(" "),v("h2",{attrs:{id:"缓存一致性解决方案"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#缓存一致性解决方案"}},[_._v("#")]),_._v(" 缓存一致性解决方案")]),_._v(" "),v("p",[_._v("读缓存：读缓存，读缓存失败则读数据库，然后缓存读数据库数据。\n写缓存：更新数据库，然后删除缓存。")]),_._v(" "),v("blockquote",[v("p",[_._v("CacheAside 方案为常规缓存一致方案，但仍然存在缓存不一致情况。如果对一致性要求比较高，需要额外操作。")])]),_._v(" "),v("p",[_._v("缓存和数据库不一致原因：")]),_._v(" "),v("ul",[v("li",[_._v("缓存key删除失败【比如某时刻缓存失效、读key不存在，读数据库，写更新数据库并删缓存（删除失败，缓存不存在），读写缓存】")]),_._v(" "),v("li",[_._v("并发导致写入脏数据")])]),_._v(" "),v("p",[_._v("解决方案：")]),_._v(" "),v("ul",[v("li",[_._v("消息队列保证key被删除：把删除失败的key放入消息队列中，然后拉取消息重试删除。")]),_._v(" "),v("li",[_._v("canal订阅binlog + 消息队列重试")])]),_._v(" "),v("h2",{attrs:{id:"高可用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#高可用"}},[_._v("#")]),_._v(" 高可用")]),_._v(" "),v("p",[_._v("功能： 数据冗余、故障恢复、负载均衡。")]),_._v(" "),v("h3",{attrs:{id:"主从复制"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#主从复制"}},[_._v("#")]),_._v(" 主从复制")]),_._v(" "),v("p",[_._v("Redis 主从复制支持 "),v("code",[_._v("主从同步")]),_._v(" 和 "),v("code",[_._v("从从同步")]),_._v(" 两种。")]),_._v(" "),v("p",[_._v("原理：")]),_._v(" "),v("ol",[v("li",[_._v("保存主节点信息（ip和port）")]),_._v(" "),v("li",[_._v("从节点尝试和主节点建立socket链接")]),_._v(" "),v("li",[_._v("从节点发送ping命令")]),_._v(" "),v("li",[_._v("从节点提供密码进行权限认证")]),_._v(" "),v("li",[_._v("主节点发送数据到从节点同步数据集")]),_._v(" "),v("li",[_._v("命令持续复制")])]),_._v(" "),v("p",[_._v("问题：")]),_._v(" "),v("ul",[v("li",[_._v("主节点故障，需要手动将从节点晋升为主节点，需要人工干预。")]),_._v(" "),v("li",[_._v("写能力和存储能力受单机影响")])]),_._v(" "),v("h3",{attrs:{id:"哨兵模式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#哨兵模式"}},[_._v("#")]),_._v(" 哨兵模式")]),_._v(" "),v("p",[_._v("哨兵节点： 哨兵系统由一个或多个哨兵节点组成，哨兵节点是特殊的 Redis 节点，不存储数据，对数据节点进行监控。\n数据节点： 主节点和从节点都是数据节点；")]),_._v(" "),v("p",[_._v("监控：")]),_._v(" "),v("ol",[v("li",[_._v("每隔10秒，每个Sentinel节点会向主节点和从节点发送info命令获取最新的拓扑结构")]),_._v(" "),v("li",[_._v("每隔2秒，每个Sentinel节点会向Redis数据节点的__sentinel__：hello 频道上发送该Sentinel节点对于主节点的判断以及当前Sentinel节点的信息")]),_._v(" "),v("li",[_._v("每隔1秒，每个Sentinel节点会向主节点、从节点、其余Sentinel节点发送一条ping命令做一次心跳检测，来确认这些节点当前是否可达")])]),_._v(" "),v("p",[_._v("功能：")]),_._v(" "),v("ol",[v("li",[_._v("监控主节点和从节点工作情况")]),_._v(" "),v("li",[_._v("主节点不工作，哨兵将会把其中一个从节点升级为主节点，让其他从节点复制该选举的主节点")]),_._v(" "),v("li",[_._v("客户端连接哨兵获取主节点地址")]),_._v(" "),v("li",[_._v("故障转移结果发送给客户端")])]),_._v(" "),v("p",[_._v("流程：")]),_._v(" "),v("ol",[v("li",[_._v("每个Sentinel节点对其他节点（主、从、其他Sentinel）发送ping，如果节点响应超时，会被该Sentinel标记为主观下线")]),_._v(" "),v("li",[_._v("当主观下线的节点是主节点，Sentinel会询问其他Sentinel节点对该主节点判断，当超过半数被Sentinel标记为主观下线，Sentinel将标记该节点为客观下线")]),_._v(" "),v("li",[_._v("Sentinel领导选举，选出一个Leader做故障转移（Raft）。")]),_._v(" "),v("li",[_._v("从其他节点中选取一个从节点，让其成为主节点，并向其他从节点发送服从新主节点命令，将原先主节点标记为从节点，并持续关注状态，恢复正常后去复制新的主节点")])]),_._v(" "),v("blockquote",[v("p",[_._v("主节点选取原则： 网络响应状态好、复制偏移最高或优先级配置")])]),_._v(" "),v("h2",{attrs:{id:"集群"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#集群"}},[_._v("#")]),_._v(" 集群")]),_._v(" "),v("p",[_._v("功能：数据分片、数据冗余、故障恢复、负载均衡。")]),_._v(" "),v("h3",{attrs:{id:"集群分片方案"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#集群分片方案"}},[_._v("#")]),_._v(" 集群分片方案")]),_._v(" "),v("ul",[v("li",[_._v("节点取余：hash(key) % N(节点编号)\n问题： 当节点数量变化时，如扩容或收缩节点，数据节点映射关 系需要重新计算，会导致数据的重新迁移。")]),_._v(" "),v("li",[_._v("一致性哈希：\n问题： 加入和删除节点会影响哈希环（顺时针下一个）节点（减少/增加相邻节点数据量），缓存在圆环上分配不均，导致部分节点压力过大。")]),_._v(" "),v("li",[_._v("虚拟槽：CRC16（key）% 16383；集群启动时每个节点都将分配一定量的槽数，增加/删除节点都将重新分配槽（回收其他节点槽/分配该节点槽给其他节点）")])])])}),[],!1,null,null,null);v.default=t.exports}}]);