(window.webpackJsonp=window.webpackJsonp||[]).push([[109],{569:function(v,_,a){"use strict";a.r(_);var e=a(3),t=Object(e.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h2",{attrs:{id:"factorybean"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#factorybean"}},[v._v("#")]),v._v(" FactoryBean")]),v._v(" "),_("p",[v._v("什么是 "),_("code",[v._v("FactoryBean")]),v._v(" ?")]),v._v(" "),_("p",[_("code",[v._v("FactoryBean")]),v._v(" 是 Spring 提供的一种扩展机制，允许用户自定义对象的创建过程。")]),v._v(" "),_("p",[v._v("当 Spring 需要创建某个对象时，它会首先检查该对象是否实现了 "),_("code",[v._v("FactoryBean")]),v._v(" 接口。如果实现了该接口，Spring 将会调用该对象的 "),_("code",[v._v("getObject()")]),v._v(" 方法来获取对象，而不是直接使用该对象本身。")]),v._v(" "),_("p",[v._v("何时使用 "),_("code",[v._v("FactoryBean")]),v._v(" ?")]),v._v(" "),_("ul",[_("li",[v._v("当需要注册的bean需要一系列复杂的初始化步骤；")]),v._v(" "),_("li",[v._v("当需要创建一个非单例的bean，并且需要在运行时彻底实现某些操作，或者我们需要对bean实例进行精细控制；")])]),v._v(" "),_("h2",{attrs:{id:"bean生命周期"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#bean生命周期"}},[v._v("#")]),v._v(" Bean生命周期")]),v._v(" "),_("ul",[_("li",[v._v("实例化")]),v._v(" "),_("li",[v._v("属性赋值")]),v._v(" "),_("li",[v._v("初始化")]),v._v(" "),_("li",[v._v("销毁")])]),v._v(" "),_("h3",{attrs:{id:"实例化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#实例化"}},[v._v("#")]),v._v(" 实例化")]),v._v(" "),_("p",[v._v("Bean 实例化时机也分为2种：")]),v._v(" "),_("ul",[_("li",[v._v("BeanFactory管理的Bean是在使用到Bean的时候才会实例化Bean")]),v._v(" "),_("li",[v._v("ApplicantContext管理的Bean在容器初始化的时候就会完成Bean实例化")])]),v._v(" "),_("h3",{attrs:{id:"属性赋值"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#属性赋值"}},[v._v("#")]),v._v(" 属性赋值")]),v._v(" "),_("p",[v._v("Bean实例化后，Spring会调用Bean的set方法，为Bean的属性赋值，包括基础属性和依赖属性。")]),v._v(" "),_("h3",{attrs:{id:"初始化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#初始化"}},[v._v("#")]),v._v(" 初始化")]),v._v(" "),_("ul",[_("li",[v._v("检查并设置 "),_("code",[v._v("Aware")]),v._v(" 接口所需对象")]),v._v(" "),_("li",[v._v("调用 "),_("code",[v._v("BeanPostProcessor")]),v._v(" 接口的 "),_("code",[v._v("postProcessBeforeInitialization")]),v._v(" 方法")]),v._v(" "),_("li",[v._v("调用 "),_("code",[v._v("InitializingBean")]),v._v(" 接口的 "),_("code",[v._v("afterPropertiesSet")]),v._v(" 方法")]),v._v(" "),_("li",[v._v("调用 "),_("code",[v._v("init-method")]),v._v(" 指定的初始化方法")]),v._v(" "),_("li",[v._v("调用 "),_("code",[v._v("BeanPostProcessor")]),v._v(" 接口的 "),_("code",[v._v("postProcessAfterInitialization")]),v._v(" 方法")]),v._v(" "),_("li",[v._v("（注册 DESTRUCTION 相关回调接口）")]),v._v(" "),_("li",[v._v("Bean初始化完成")])]),v._v(" "),_("h3",{attrs:{id:"销毁"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#销毁"}},[v._v("#")]),v._v(" 销毁")]),v._v(" "),_("ul",[_("li",[v._v("调用 "),_("code",[v._v("DisposableBean")]),v._v(" 接口的 "),_("code",[v._v("destroy")]),v._v(" 方法")]),v._v(" "),_("li",[v._v("调用 "),_("code",[v._v("destroy-method")]),v._v(" 指定的销毁方法")]),v._v(" "),_("li",[v._v("Bean销毁完成")])])])}),[],!1,null,null,null);_.default=t.exports}}]);