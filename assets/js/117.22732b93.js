(window.webpackJsonp=window.webpackJsonp||[]).push([[117],{577:function(t,a,e){"use strict";e.r(a);var _=e(3),s=Object(_.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"比较接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#比较接口"}},[t._v("#")]),t._v(" 比较接口")]),t._v(" "),a("h3",{attrs:{id:"comparable"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#comparable"}},[t._v("#")]),t._v(" Comparable")]),t._v(" "),a("p",[t._v("Comparable是排序接口；若一个类实现了Comparable接口，就意味着“该类支持排序”。可以使用Arrays.sort()对改类进行排序, 默认排序为从小到大")]),t._v(" "),a("p",[t._v("该接口有个 "),a("code",[t._v("int compare(T o)")]),t._v(" 方法")]),t._v(" "),a("ol",[a("li",[t._v("如果返回值小于0： 表示 this 对象 小于 o 对象")]),t._v(" "),a("li",[t._v("如果返回值大于0： 表示 this 对象 大于 o 对象")])]),t._v(" "),a("h3",{attrs:{id:"comparator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#comparator"}},[t._v("#")]),t._v(" Comparator")]),t._v(" "),a("p",[t._v("假如说我们有这样一个需求，需要对类的年龄进行排序，但是类是别人写好的，里面没有Comparable接口，如果在不允许改变源代码的情况下，我们可以使用Comparator接口。")]),t._v(" "),a("p",[t._v("该接口有个 "),a("code",[t._v("int compare(T o1, T o2)")]),t._v(" 方法")]),t._v(" "),a("ol",[a("li",[t._v("如果返回值小于0： 表示 o1 对象 小于 o2 对象")]),t._v(" "),a("li",[t._v("如果返回值大于0： 表示 o1 对象 大于 o2 对象")])]),t._v(" "),a("h2",{attrs:{id:"集合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#集合"}},[t._v("#")]),t._v(" 集合")]),t._v(" "),a("h3",{attrs:{id:"list"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#list"}},[t._v("#")]),t._v(" list")]),t._v(" "),a("h3",{attrs:{id:"queue"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#queue"}},[t._v("#")]),t._v(" queue")]),t._v(" "),a("ul",[a("li",[t._v("PriorityQueue:非阻塞，线程不安全，无边界， "),a("strong",[t._v("能保证每次取出的元素都是队列中权值最小的。")]),t._v("（小顶堆）")]),t._v(" "),a("li",[t._v("ConcurrentLinkedQueue:非阻塞，线程安全，无边界，基于链接节点的队列实现。")]),t._v(" "),a("li",[t._v("PriorityBlockingQueue:阻塞，线程安全，无边界， 效果同优先级队列。")]),t._v(" "),a("li",[t._v("ArrayBlockingQueue:阻塞，线程安全，有边界， 一旦创建容量不可改变")]),t._v(" "),a("li",[t._v("LinkedBlockingQueue:阻塞，线程安全，无边界（可选有边界），链表实现")]),t._v(" "),a("li",[t._v("DelayQueue: 阻塞、线程安全、无边界，使用优先级队列实现的无界阻塞队列实现类，只有在延迟期满时才能从中提取元素。")])]),t._v(" "),a("h3",{attrs:{id:"set"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set"}},[t._v("#")]),t._v(" set")]),t._v(" "),a("ul",[a("li",[t._v("HashSet: 底层实现是HashMap， 线程不安全， 可以存储 null 值")]),t._v(" "),a("li",[t._v("LinkedHashSet: 是 HashSet的子类， 能够按照"),a("strong",[t._v("元素添加的顺序遍历")])]),t._v(" "),a("li",[t._v("TreeSet: 底层是红黑数，能够按照添加"),a("strong",[t._v("元素大小顺序进行遍历")])])]),t._v(" "),a("h3",{attrs:{id:"map"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#map"}},[t._v("#")]),t._v(" map")]),t._v(" "),a("h3",{attrs:{id:"常用并发集合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用并发集合"}},[t._v("#")]),t._v(" 常用并发集合")]),t._v(" "),a("ul",[a("li",[t._v("ConcurrentLinkedQueue:非阻塞，线程安全，无边界，基于链接节点的队列实现。")]),t._v(" "),a("li",[t._v("CopyOnWriteArrayList: 线程安全的 List，在读多写少的场合性能非常好。")]),t._v(" "),a("li",[t._v("ConcurrentLinkedQueue: 高效的并发队列，使用链表实现。可以看做一个线程安全的 LinkedList，这是一个非阻塞队列。")]),t._v(" "),a("li",[t._v("ConcurrentSkipListMap: 跳表的实现。使用跳表的数据结构进行快速查找。")])]),t._v(" "),a("h2",{attrs:{id:"bigdecimal"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bigdecimal"}},[t._v("#")]),t._v(" BigDecimal")]),t._v(" "),a("p",[t._v("尽量避免是用 double 的构造函数， 如果需要对 double 进行构造， 可以使用 "),a("code",[t._v("Double.toString(val)")]),t._v(" 转为 str， 再用 str 进行构造")]),t._v(" "),a("p",[t._v("BigDecimal 进行除法时当不整除出现无限循环小数时，会抛异常，解决办法是为 divide方法设置精度的小数点")]),t._v(" "),a("p",[t._v("NumberFormat 可以对 BigDecimal 进行数据格式化")]),t._v(" "),a("p",[t._v("舍入模式")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("舍入模式")]),t._v(" "),a("th",[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("ROUND_UP")]),t._v(" "),a("td",[t._v("该模式远离0，总是在非零丢弃分数之前增加数字，朝远离数轴的方向进位")])]),t._v(" "),a("tr",[a("td",[t._v("ROUND_DOWN")]),t._v(" "),a("td",[t._v("该模式向0靠近，永远不要在一个被丢弃的分数前增加数字(即截断)")])]),t._v(" "),a("tr",[a("td",[t._v("ROUND_CEILING")]),t._v(" "),a("td",[t._v("该模式向正无穷舍入")])]),t._v(" "),a("tr",[a("td",[t._v("ROUND_FLOOR")]),t._v(" "),a("td",[t._v("该模式向负无穷舍入")])]),t._v(" "),a("tr",[a("td",[t._v("ROUND_HALF_UP")]),t._v(" "),a("td",[t._v("该模式向“最近的邻居”四舍五入。如果丢弃的分数是≥ 0.5，则行为与ROUND_UP相同;否则，行为与ROUND_DOWN相同（"),a("strong",[t._v("四舍五入")]),t._v("）")])]),t._v(" "),a("tr",[a("td",[t._v("ROUND_HALF_DOWN")]),t._v(" "),a("td",[t._v("该模式向“最近的邻居”四舍五入。如果丢弃的分数是> 0.5，则行为与ROUND_UP相同；否则，行为与ROUND_DOWN相同（"),a("strong",[t._v("五舍六入")]),t._v("）")])]),t._v(" "),a("tr",[a("td",[t._v("ROUND_HALF_EVEN")]),t._v(" "),a("td",[t._v("四舍六入，五看前一位是偶数舍，奇数进位")])]),t._v(" "),a("tr",[a("td",[t._v("ROUND_UNNECESSARY")]),t._v(" "),a("td",[t._v("在产生不精确结果的操作上指定了此舍入模式，则会抛出ArithmeticException")])])])]),t._v(" "),a("h2",{attrs:{id:"日期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#日期"}},[t._v("#")]),t._v(" 日期")]),t._v(" "),a("h3",{attrs:{id:"utc和gmt区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#utc和gmt区别"}},[t._v("#")]),t._v(" UTC和GMT区别")]),t._v(" "),a("p",[t._v("GMT（Greenwich Mean Time）， 格林威治平时（也称格林威治时间）。")]),t._v(" "),a("p",[t._v("它规定太阳每天经过位于英国伦敦郊区的皇家格林威治天文台的时间为中午12点。")]),t._v(" "),a("p",[t._v("UTC（Coodinated Universal Time），协调世界时，又称世界统一时间、世界标准时间、国际协调时间。")]),t._v(" "),a("p",[t._v("UTC 是现在全球通用的时间标准，全球各地都同意将各自的时间进行同步协调。UTC 时间是经过平均太阳时（以格林威治时间GMT为准）、 地轴运动修正后的新时标以及以秒为单位的国际原子时所综合精算而成。")]),t._v(" "),a("h3",{attrs:{id:"instant、date和localdate区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#instant、date和localdate区别"}},[t._v("#")]),t._v(" Instant、Date和LocalDate区别")]),t._v(" "),a("ul",[a("li",[t._v("Instant： 表示的是时间线上的一个点，也就是时刻， 获取的是UTC的时间。")]),t._v(" "),a("li",[t._v("Date: 根据当前服务器所处的环境的默认时区来获取的当前时间。 线程不安全。")]),t._v(" "),a("li",[t._v("LocalDateTime: 是一个不可变类，线程安全。")])]),t._v(" "),a("h3",{attrs:{id:"日期转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#日期转换"}},[t._v("#")]),t._v(" 日期转换")]),t._v(" "),a("p",[t._v("Date <----\x3e Instant <----\x3e ZonedDateTime <----\x3e LocalDate")]),t._v(" "),a("blockquote",[a("p",[t._v("LocalDateTime总是表示本地日期和时间，要表示一个带时区的日期和时间，我们就需要ZonedDateTime。\n可以简单地把ZonedDateTime理解成LocalDateTime加ZoneId")])]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('// Date to Localdate\n\nDate now = new Date();\nInstant instant = now.toInstant();\nZonedDateTime zdt = instant.atZone(ZoneId.of("UTC+8"));\n// ZonedDateTime zdt = instant.atZone(ZoneId.systemDefault());\nLocalDate localDate = zdt.toLocalDate();\n\n\n// Localdate to Date\nLocalDate now = LocalDate.now();\nZonedDateTime zdt = now.atStartOfDay(ZoneId.of("UTC+8"));\nInstant instant = zdt.toInstant();\nDate date = Date.from(instant);\n\n\n// Localdate  Localdatetime\n LocalDateTime ldt = ld.atStartOfDay();  \n LocalDateTime ldt = ld.atTime(23, 11, 22);\n \n LocalDate ld = ldt.toLocalDate();\n')])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br")])]),a("h3",{attrs:{id:"日期格式化工具"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#日期格式化工具"}},[t._v("#")]),t._v(" 日期格式化工具")]),t._v(" "),a("ul",[a("li",[t._v("DateTimeFormatter")]),t._v(" "),a("li",[t._v("SimpleDateFormat")])]),t._v(" "),a("h3",{attrs:{id:"日期计算"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#日期计算"}},[t._v("#")]),t._v(" 日期计算")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("计算方式")]),t._v(" "),a("th",[t._v("Date")]),t._v(" "),a("th",[t._v("LocalDate")]),t._v(" "),a("th",[t._v("LocalDateTime")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("计算2个日期差值")]),t._v(" "),a("td",[t._v("TimeUnit.DAYS.convert(d2.getTime() - d1.getTime(), TimeUnit.MILLISECONDS)")]),t._v(" "),a("td",[t._v("Period.between(ld1, ld2).getDays()")]),t._v(" "),a("td",[t._v("ChronoUnit.HOURS.between(ldt1, ldt2)")])]),t._v(" "),a("tr",[a("td",[t._v("日期比较大小")]),t._v(" "),a("td",[t._v("d1.after(d2)")]),t._v(" "),a("td",[t._v("ld1.isAfter(ld2)")]),t._v(" "),a("td",[t._v("ldt1.isAfter(ldt2)")])]),t._v(" "),a("tr",[a("td",[t._v("日期加减")]),t._v(" "),a("td"),t._v(" "),a("td",[t._v("ld1.plus(2, TimeUnit.DAYS)")]),t._v(" "),a("td",[t._v("ld1.plus(2, TimeUnit.HOURS)")])])])]),t._v(" "),a("blockquote",[a("p",[t._v("要想在JDBC中，使用Java8的日期LocalDate、LocalDateTime，则必须要求数据库驱动的版本不能低于4.2")])])])}),[],!1,null,null,null);a.default=s.exports}}]);