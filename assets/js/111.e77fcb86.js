(window.webpackJsonp=window.webpackJsonp||[]).push([[111],{570:function(t,e,r){"use strict";r.r(e);var v=r(3),a=Object(v.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"定义"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#定义"}},[t._v("#")]),t._v(" 定义")]),t._v(" "),e("p",[t._v("过滤器是 java web 三大常用组件之一，可以对几乎所有请求进行过滤，但是缺点是一个过滤器实例只能在容器初始化时调用一次。")]),t._v(" "),e("h2",{attrs:{id:"springboot中使用filter"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#springboot中使用filter"}},[t._v("#")]),t._v(" springboot中使用filter")]),t._v(" "),e("h3",{attrs:{id:"方式一"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#方式一"}},[t._v("#")]),t._v(" 方式一")]),t._v(" "),e("ul",[e("li",[t._v("实现 "),e("code",[t._v("javax.servlet.Filter")]),t._v(" 接口")]),t._v(" "),e("li",[t._v("在过滤器上添加 "),e("code",[t._v('@WebFilter(filterName="firstFilter",urlPatterns={"/*"})')]),t._v(" 注解，并指定匹配路径")]),t._v(" "),e("li",[t._v("在主启动类上或者配置类上添加 "),e("code",[t._v("@ServletComponentScan")]),t._v(" 注解")])]),t._v(" "),e("div",{staticClass:"custom-block warning"},[e("p",{staticClass:"title"}),e("p",[t._v("添加 "),e("code",[t._v("@Order")]),t._v(" 注解并不能改变Filter 执行的先后顺序。")]),t._v(" "),e("p",[e("code",[t._v("@Order")]),t._v("注解用于切面的优先级和集合注入时bean的顺序，对于实例化bean的顺序没有影响。")])]),e("p",[t._v("缺点：不能控制 filter 执行顺序")]),t._v(" "),e("h3",{attrs:{id:"方式二"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#方式二"}},[t._v("#")]),t._v(" 方式二")]),t._v(" "),e("ul",[e("li",[t._v("实现 "),e("code",[t._v("javax.servlet.Filter")]),t._v(" 接口")]),t._v(" "),e("li",[t._v("在过滤器上添加 "),e("code",[t._v("@Component")]),t._v(" 注解")]),t._v(" "),e("li",[t._v("在filter上添加 "),e("code",[t._v("@Order")]),t._v(" 注解控制filter 执行顺序")])]),t._v(" "),e("p",[t._v("缺点：既可以控制 filter 执行顺序，也可以控制 filter 的拦截路径")]),t._v(" "),e("h3",{attrs:{id:"方式三"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#方式三"}},[t._v("#")]),t._v(" 方式三")]),t._v(" "),e("ul",[e("li",[t._v("实现 "),e("code",[t._v("javax.servlet.Filter")]),t._v(" 接口")]),t._v(" "),e("li",[t._v("新增一个配置类，然后将每个过滤器封装为 "),e("code",[t._v("FilterRegistrationBean")])])]),t._v(" "),e("p",[t._v("优点：既可以控制 filter 执行顺序，也可以控制 filter 的拦截路径\n缺点：需要对每个类击进行封装，稍微麻烦一定")])])}),[],!1,null,null,null);e.default=a.exports}}]);