(window.webpackJsonp=window.webpackJsonp||[]).push([[199],{662:function(t,a,v){"use strict";v.r(a);var e=v(3),r=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"idea启动参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#idea启动参数"}},[t._v("#")]),t._v(" idea启动参数")]),t._v(" "),a("p",[t._v("IDEA中vm options与program arguments区别：")]),t._v(" "),a("p",[a("code",[t._v("VM options")]),t._v("其实就是我们在程序中需要的运行时环境变量，它需要以-D或-X或-XX开头，每个参数使用空格分隔")]),t._v(" "),a("p",[a("code",[t._v("eg")]),t._v(": "),a("code",[t._v("-Dspring.profiles.active=dev3")])]),t._v(" "),a("p",[a("code",[t._v("Program arguments")]),t._v("为我们传入main方法的字符串数组"),a("code",[t._v("args[]")]),t._v("，它通常以--开头，如--"),a("code",[t._v("spring.profiles.active=dev3")]),t._v("; 其等价于"),a("code",[t._v("-Dspring.profiles.active=dev3")]),t._v(","),a("strong",[t._v("如果同时存在，以Program arguments配置优先")])]),t._v(" "),a("h2",{attrs:{id:"代码重构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码重构"}},[t._v("#")]),t._v(" 代码重构")]),t._v(" "),a("h3",{attrs:{id:"类名-方法名-字段重命名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类名-方法名-字段重命名"}},[t._v("#")]),t._v(" 类名/方法名/字段重命名")]),t._v(" "),a("p",[a("code",[t._v("shift + F6")])]),t._v(" "),a("h3",{attrs:{id:"提取方法-内联方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#提取方法-内联方法"}},[t._v("#")]),t._v(" 提取方法/内联方法")]),t._v(" "),a("ul",[a("li",[t._v("提取方法: 将公共代码抽出来为一个方法\n"),a("code",[t._v("Ctrl + Alt + M")])]),t._v(" "),a("li",[t._v("内联方法：将方法内的代码融入到另外一个方法中\n"),a("code",[t._v("Ctrl + Alt + N")])])]),t._v(" "),a("h3",{attrs:{id:"重构变量-重构常量-重构成员变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重构变量-重构常量-重构成员变量"}},[t._v("#")]),t._v(" 重构变量/重构常量/重构成员变量")]),t._v(" "),a("ul",[a("li",[t._v("提取变量： "),a("code",[t._v("Ctrl + Alt + C")])]),t._v(" "),a("li",[t._v("提取常量： "),a("code",[t._v("Ctrl + Alt + V")])]),t._v(" "),a("li",[t._v("提取成员变量："),a("code",[t._v("Ctrl + Alt + F")])])]),t._v(" "),a("h3",{attrs:{id:"查看字段有在哪些地方被引用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看字段有在哪些地方被引用"}},[t._v("#")]),t._v(" 查看字段有在哪些地方被引用")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("Alt + F7")])])]),t._v(" "),a("h3",{attrs:{id:"修改源码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#修改源码"}},[t._v("#")]),t._v(" 修改源码")]),t._v(" "),a("p",[t._v("如果想修改源代码，可以在当前项目下建立一个和源码同名类，并且具有相同的包路径。")]),t._v(" "),a("p",[t._v("原理是由java类加载机制决定的，会有限加载当前类路径下的类文件。")]),t._v(" "),a("h3",{attrs:{id:"bean生命周期调试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bean生命周期调试"}},[t._v("#")]),t._v(" bean生命周期调试")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("如果想判断bean是什么时候实例化的， 可以在bean的所有构造方法上都打上断点")])]),t._v(" "),a("li",[a("p",[t._v("如果想控制bean初始化，可以实现"),a("code",[t._v("BeanPostProcessor")]),t._v("类型，然后在初始化请求对bean实例进行判断，在判断中加入自己的逻辑")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);