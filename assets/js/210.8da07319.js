(window.webpackJsonp=window.webpackJsonp||[]).push([[210],{667:function(_,r,s){"use strict";s.r(r);var e=s(3),v=Object(e.a)({},(function(){var _=this,r=_._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[r("h2",{attrs:{id:"系统设计思维导图"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#系统设计思维导图"}},[_._v("#")]),_._v(" 系统设计思维导图")]),_._v(" "),r("p",[r("img",{attrs:{src:"https://raw.githubusercontent.com/378752389/image-bed/main/king-note/IM%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE.png",alt:"IM系统设计思维导图"}})]),_._v(" "),r("h2",{attrs:{id:"消息管理-重点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#消息管理-重点"}},[_._v("#")]),_._v(" 消息管理 （重点）")]),_._v(" "),r("h3",{attrs:{id:"消息发送"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#消息发送"}},[_._v("#")]),_._v(" 消息发送")]),_._v(" "),r("p",[_._v("这块设计和连接管理耦合比较紧密，连接管理此处不做展开。")]),_._v(" "),r("p",[r("strong",[_._v("消息接口设计：")])]),_._v(" "),r("ol",[r("li",[_._v("用户发送过来的消息，对其进行合法性判断，然后直接存储到数据库中。")]),_._v(" "),r("li",[_._v("事务执行完后，将消息推送到通道中（Redis或MQ）。")]),_._v(" "),r("li",[_._v("服务器依据自身Id或IP订阅通道（Redis或MQ），从通道中拉取消息，然后拿到本地连接并将消息推送给其他客户端")])]),_._v(" "),r("h3",{attrs:{id:"消息撤回和已读未读"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#消息撤回和已读未读"}},[_._v("#")]),_._v(" 消息撤回和已读未读")]),_._v(" "),r("p",[_._v("要实现撤回消息和已读未读等功能，则需要对消息状态进行管理，消息状态管理通常是单项状态流。按照顺序主要包含如下状态：")]),_._v(" "),r("ol",[r("li",[_._v("未发送： 消息入库，但未发送给其他客户端")]),_._v(" "),r("li",[_._v("以发送： 消息已经发送给其他客户端，但其他客户端未读消息（会话没有选中）")]),_._v(" "),r("li",[_._v("以读：客户端已经读取消息（会话被选中，修改会话中消息状态； 对于群聊消息，该状态无效）")]),_._v(" "),r("li",[_._v("撤回：当处于2、3状态并且消息不足预定时间，可以设置为撤回状态（冲洗发送消息到客户端，反馈到页面上； 对于群聊消息，该状态无效）")])]),_._v(" "),r("h3",{attrs:{id:"历史消息"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#历史消息"}},[_._v("#")]),_._v(" 历史消息")]),_._v(" "),r("p",[_._v("通过消息ID，进行游标分页查询。（普通分页会出现重复读或跳跃读问题，具体"),r("RouterLink",{attrs:{to:"/java/开发思维/开发思维.html#游标分页"}},[_._v("请查看")]),_._v("）")],1),_._v(" "),r("h3",{attrs:{id:"离线消息"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#离线消息"}},[_._v("#")]),_._v(" 离线消息")]),_._v(" "),r("p",[_._v("客户端会话管理会记录当前用户会话消息中最大的消息ID。当用户登录时，服务器会推送所有消息ID大于当前会话消息中最大的消息ID且为当前用户的消息。\n客户端对于离线消息的判断需要满足如下条件：")]),_._v(" "),r("ol",[r("li",[_._v("消息ID大于当前会话消息中最大的消息ID（如果没有去除该条件）")]),_._v(" "),r("li",[_._v("消息状态为已发送")]),_._v(" "),r("li",[_._v("消息接收人必须为当前用户")])]),_._v(" "),r("p",[_._v("对于私聊消息，可以基于消息状态获取离线消息；对于群聊消息，则必须保存群聊消息偏移。群聊消息偏移可以保存在群成员表中。")]),_._v(" "),r("p",[_._v("由于消息发送非常频繁，回话指针不可能每次新消息插入后都修改群聊消息指针，因此设计时需要加一层缓存，当消息状态改变时修改缓存指针，并定期刷新到redis中。")]),_._v(" "),r("h2",{attrs:{id:"用户在线状态-缓存版"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#用户在线状态-缓存版"}},[_._v("#")]),_._v(" 用户在线状态 （缓存版）")]),_._v(" "),r("p",[_._v("问题：单体架构下，用户登录后，会保存<user_id, channel> 这样一个映射关系，之后如果需要判断用户在线状态，可以通过 user_id\n找到对应的连接，如果有则表明用户在线，否则表示用户离线。但在分布式架构下，连接对象可能不存储在当前服务器上。")]),_._v(" "),r("p",[_._v("解决方案：我们添加一层<user_id, server_id>映射，映射关系表明用户当前连接到哪些服务器上，映射存储在redis当中，这样所有服务器都可以获取到相同的映射关系。\n用户登录成功后，会将<user_id, server_id>映射存储到redis中；用户下线时，只需将<user_id, server_id>映射从redis中删除即可。\n当需要判断用户在线状态时，通过user_id获取到对应的server_id，如果存在，则表明用户在线，否则用户处于离线。")]),_._v(" "),r("p",[_._v("但这样也会产生其他问题：<user_id, server_id>映射和服务器本地存储的<user_id, channel>映射不一致。")]),_._v(" "),r("p",[_._v("例如:如果某一台netty服务突然挂了，那么这台服务器的<user_id, channel>映射关系会丢失，但是<user_id, server_id>映射关系并不会丢失。这就会导致一个问题：\n用户A明明已经断开连接了，但是其状态任然是在线的，如果服务器短期内起不来，用户A也会一直连接不上，应为不能通过负载均衡获取新服务器，存在旧服务器映射。")]),_._v(" "),r("p",[_._v("解决方案：")]),_._v(" "),r("ol",[r("li",[_._v("定时任务，定期检查<user_id, server_id>映射关系，如果发现<user_id, server_id>映射关系不存在，则将其从redis中删除。（不推荐）")]),_._v(" "),r("li",[_._v("<user_id, channel>映射添加过期时间，然后在服务器进行心跳检测的时候进行续期，这样，经理一段时候后如果用户任然连接不上服务器，会删除<user_id, server_id>映射，同时会分配新的服务器id。")])])])}),[],!1,null,null,null);r.default=v.exports}}]);